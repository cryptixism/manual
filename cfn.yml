# QuickOpsStack

AWSTemplateFormatVersion: "2010-09-09"
Description: Template to create a Spot EC2 instance on Ubuntu with automated replacement and bootstrap scripts from a Git repo.

Parameters:
  Region:
    Type: String
    Description: "The AWS region where the resources will be created."
    Default: "ap-south-1"  # Default to Mumbai region

  InstanceType:
    Type: String
    Description: "EC2 Instance Type (e.g., t3.micro, t3.small)"
    Default: "t3.micro"
    AllowedValues:
      - t3.micro
      - t3.small
      - t3.medium
    ConstraintDescription: "Must be a valid EC2 instance type."

  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: "Key pair to access the instance."
    Default: "ap-south-1.def.key"  # Fixed default key name for the Mumbai region
    # Default: !Sub "${LatestUbuntuAmi}.def.key"  # Fixed default key name for the Mumbai region

  GitRepoUrl:
    Type: String
    Description: "URL of the Git repository to clone."
    Default: "https://github.com/cryptixism/manual.git"  # Updated default Git repo

  BootstrapScript:
    Type: String
    Description: "Name of the bootstrap script to run from the cloned repo."
    Default: "bootstrap.sh"

  MaxSpotPrice:
    Type: String
    Description: "The maximum price you're willing to pay for the Spot Instance (e.g., 0.004)."
    Default: "0.004"  # Updated default max spot price

  LatestUbuntuAmi:
    Type: String
    Description: "The AMI ID for the latest Ubuntu version."
    Default: "/aws/service/canonical/ubuntu/server/24.10/stable/current/amd64/hvm/ebs-gp3/ami-id"  # Default value pointing to the specified Ubuntu AMI

Resources:
  # Create a new VPC
  QuickOpsVPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: "10.0.0.0/16"  # CIDR block for the VPC
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: "Name"
          Value: "QuickOpsVPC"

  # Create an Internet Gateway
  QuickOpsInternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: "Name"
          Value: "QuickOpsInternetGateway"

  # Attach the Internet Gateway to the VPC
  InternetGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref QuickOpsVPC
      InternetGatewayId: !Ref QuickOpsInternetGateway

  # Create 3 public subnets in different availability zones
  PublicSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref QuickOpsVPC
      CidrBlock: "10.0.1.0/24"  # First public subnet CIDR block
      AvailabilityZone: !Select [0, !GetAZs '']  # First AZ
      MapPublicIpOnLaunch: true  # Automatically assign public IPs

  PublicSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref QuickOpsVPC
      CidrBlock: "10.0.2.0/24"  # Second public subnet CIDR block
      AvailabilityZone: !Select [1, !GetAZs '']  # Second AZ
      MapPublicIpOnLaunch: true  # Automatically assign public IPs

  PublicSubnet3:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref QuickOpsVPC
      CidrBlock: "10.0.3.0/24"  # Third public subnet CIDR block
      AvailabilityZone: !Select [2, !GetAZs '']  # Third AZ
      MapPublicIpOnLaunch: true  # Automatically assign public IPs

  # Create a route table for the public subnets
  PublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref QuickOpsVPC  # Associate this route table with the same VPC
      Tags:
        - Key: "Name"
          Value: "PublicRouteTable"

  # Create a route to the Internet Gateway in the public route table
  PublicRoute:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"  # Route all traffic to the internet
      GatewayId: !Ref QuickOpsInternetGateway  # Ensure this references the correct IGW

  # Associate the public route table with the public subnets
  PublicSubnet1RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet3RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PublicSubnet3
      RouteTableId: !Ref PublicRouteTable

  # Security Group for the EC2 instance
  QuickOpsSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Quick Ops - Allow SSH and HTTP access"
      VpcId: !Ref QuickOpsVPC
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 22
          ToPort: 22
          Description: "ssh"
          CidrIp: "0.0.0.0/0"  # Change this to your IP 
        - IpProtocol: "tcp"
          FromPort: 22374
          ToPort: 22374
          Description: "x-ui"
          CidrIp: "0.0.0.0/0"  # Change this to your IP 
        - IpProtocol: "tcp"
          FromPort: 36343
          ToPort: 36343
          Description: "mtg"
          CidrIp: "0.0.0.0/0"   
        - IpProtocol: "tcp"
          FromPort: 43500
          ToPort: 43600
          Description: "xray"
          CidrIp: "0.0.0.0/0"

  # IAM Role for the Spot Instance
  QuickOpsSpotInstanceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "ec2.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "SpotAndSSMReadPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              # Grant EC2 instances access to necessary Spot and Auto Scaling actions
              - Effect: "Allow"
                Action:
                  - "ec2:DescribeSpotInstanceRequests"
                  - "ec2:DescribeInstances"
                  - "autoscaling:DescribeAutoScalingGroups"
                  - "autoscaling:UpdateAutoScalingGroup"
                Resource: "*"  # Allow actions on all resources; restrict as necessary
              # Grant read-only access to SSM parameters under /manual/conf/*
              - Effect: "Allow"
                Action:
                  - "ssm:GetParameter"
                  - "ssm:GetParameters"
                Resource: 
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/manual/conf/*"  # Using !Sub for dynamic ARN

  # Instance Profile that will associate the above IAM role with the EC2 instance
  QuickOpsSpotInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Roles:
        - Ref: QuickOpsSpotInstanceRole

  # Launch Template for the EC2 Spot Instance
  QuickOpsSpotInstanceLaunchTemplate:
    Type: "AWS::EC2::LaunchTemplate"
    Properties:
      LaunchTemplateData:
        InstanceType: !Ref InstanceType  # Use the instance type parameter
        KeyName: !Ref KeyName            # Use the key pair parameter
        IamInstanceProfile:
          Arn: !GetAtt QuickOpsSpotInstanceProfile.Arn  # Attach the IAM role
        ImageId: !Sub "{{resolve:ssm:${LatestUbuntuAmi}}}"  # Use SSM parameter to fetch the specified Ubuntu AMI ID
        BlockDeviceMappings:  # Specify EBS volume configuration
          - DeviceName: "/dev/xvda"
            Ebs:
              VolumeSize: 20  # Size in GB
              VolumeType: "gp3"  # Use gp3 EBS volume type
              DeleteOnTermination: true  # Delete volume on termination
        SecurityGroupIds:
          - !Ref QuickOpsSecurityGroup  # Attach the security group to the instance
        UserData:  # User data to bootstrap the instance
          Fn::Base64: !Sub |
            #!/bin/bash
            set -x
            export working_dir=/opt/quick_ops
            git clone ${GitRepoUrl} $working_dir
            cd $working_dir
            chmod +x ${BootstrapScript}
            ./${BootstrapScript}

  # Auto Scaling Group to manage the Spot Instances
  SpotInstanceAutoScalingGroup:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      MinSize: "1"  # Minimum size of the Auto Scaling Group
      MaxSize: "1"  # Maximum size of the Auto Scaling Group
      DesiredCapacity: "1"  # Desired count of instances is 1
      VPCZoneIdentifier:
        - !Ref PublicSubnet1  # Reference the first public subnet for instance placement
        - !Ref PublicSubnet2  # Reference the second public subnet for instance placement
        - !Ref PublicSubnet3  # Reference the third public subnet for instance placement
      MixedInstancesPolicy:
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref QuickOpsSpotInstanceLaunchTemplate  # Reference the launch template
            Version: !GetAtt QuickOpsSpotInstanceLaunchTemplate.LatestVersionNumber  # Use the latest version of the Launch Template
        InstancesDistribution:
          SpotAllocationStrategy: "lowest-price"  # Set allocation strategy to lowest price
          SpotMaxPrice: !Ref MaxSpotPrice  # Set the maximum price to match the parameter
          SpotInstancePools: 2  # Number of Spot instance pools to use
          OnDemandPercentageAboveBaseCapacity: 0  # Only use Spot instances
